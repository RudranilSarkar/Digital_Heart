function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 25-Jun-2018 20:10:08.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx9 matrix, input #1
% and returns:
%   y = Qx2 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [29;0;1;94;126;0;0;71;0];
x1_step1.gain = [0.0416666666666667;2;0.666666666666667;0.0188679245283019;0.0045662100456621;2;2;0.0152671755725191;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.9934969655592425;1.3084180997093724;1.2991334934121952;0.52921677690122282;0.91302777233652421;0.60251567725229038;-0.39092029979513704;0.80029764701106709;-1.4204505987093436;1.270467152486856];
IW1_1 = [-1.075485942302552 0.56783093352418523 1.1861699927227722 -0.67312082676352258 0.54487935699510082 0.28413201683782935 -0.63426616880718412 -0.21218461262465882 -0.50293908638899765;-0.50240598464017727 1.5545183039443331 0.14203299976813949 0.24694077398434233 -0.50903055324968316 0.9354735433454151 0.20939333348497802 -0.31950925685640902 -0.33666789846172335;-0.32237685034948838 -0.46272848405741823 0.52656279117512672 0.96167792539899744 0.057569387602894484 0.19283861717708953 -1.3345106113172709 -0.31794530636921242 0.56715696883078326;-0.22506579805439694 0.12041048510691446 -1.3835101637491398 -1.2816026159865705 -0.28608842611242896 -0.2366820414569355 0.2540991556701831 2.1554752418774967 -0.51693394222449651;-1.3901461782784443 -0.14913268134535956 -1.1124865461742799 0.49888681159482173 -0.44218956215923649 -0.94677738240190656 -1.2427969494429931 0.72541880453210461 0.56304581687168798;0.61604966075890244 -0.11984492646058706 0.25143831709733577 0.24796582573501758 -1.100603170906022 -0.36817935298916338 0.30947844819690989 0.018439840607045198 -1.2397027210052862;-0.83612145594136089 -0.81767881123664543 -0.63487678023648553 -0.34676272945477837 -0.91454817059956661 -0.8595502224223055 -0.51786745939370438 0.16198200434609794 0.56504925890517743;0.069673436417801549 -1.1420974347711805 -0.0069130260922851822 0.37520177184214709 0.5763872804834772 1.195766108261574 -0.040135412681169269 1.1161895185805042 -0.70603614552085681;-0.51045826098593639 0.67518465345233247 0.30262464048424031 0.71820873785455042 0.18738642991908749 0.54951552740520981 -0.71638510926845567 0.77675079425267679 -0.63403221991598224;0.95614854713439823 -1.190709296939592 0.43127089304390265 0.95915960161365088 -0.36856154362227023 -0.43676708999671227 0.37073348981867882 -1.1112398973887916 -0.68477904566114733];

% Layer 2
b2 = [0.39177358971747428;-1.1019206231223084];
LW2_1 = [-0.66720897282927016 -0.16961271341372436 -0.37582826038163092 0.41983097412372389 1.307008398414726 0.52840682521742 0.23042526738577751 1.4846703968821726 0.12367581026746308 -1.1431179987840987;0.68007578977731342 0.49220456586120093 0.9752452584755894 -1.6066931625538083 -0.97083511792269739 -0.31305611881371187 0.040399999940958463 0.13173613830551498 -0.27026576373346828 -0.40589928438262446];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
